# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Check test-vectors

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  repository_dispatch:
    types: [ok-to-test-command]

jobs:
  trusted-build:
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Set int-bot SSH key
        run: |
          touch /tmp/ssh-key
          echo "${{ secrets.INT_BOT_SSH_KEY }}" > /tmp/ssh-key
          chmod 400 /tmp/ssh-key
          eval "$(ssh-agent -s)"
          ssh-add /tmp/ssh-key
      - name: Checkout code
        uses: actions/checkout@v2
      - name: setup
        run: |
          eval "$(ssh-agent -s)"
          ssh-add /tmp/ssh-key
          npm install -g npm@7.13.0
          npm run setup
          cd test
          npx hardhat compile
          cd ..
      - name: eslint
        run: npm run eslint
      - name: check no-data state-transition
        run: npm run test:st:no-data
      - name: check calldata state-transition
        run: npm run test:st:calldata
      - name: check smt
        run: npm run test:smt
      - name: check contracts
        run: npm run test:contracts
      - name: check mt bridge
        run: npm run test:mt:bridge
      - name: check test e2e
        run: npm run test:e2e
  from-fork-build:
    if:
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.sha != '' &&
      contains(github.event.client_payload.pull_request.head.sha, github.event.client_payload.slash_command.sha)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Set int-bot SSH key
        run: |
          touch /tmp/ssh-key
          echo "${{ secrets.INT_BOT_SSH_KEY }}" > /tmp/ssh-key
          chmod 400 /tmp/ssh-key
          eval "$(ssh-agent -s)"
          ssh-add /tmp/ssh-key
      - name: Fork based /ok-to-test checkout
        uses: actions/checkout@v2
        with:
          ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'
      - name: setup
        run: |
          eval "$(ssh-agent -s)"
          ssh-add /tmp/ssh-key
          npm install -g npm@7.13.0
          npm run setup
          cd test
          npx hardhat compile
          cd ..
      - name: eslint
        run: npm run eslint
      - name: check no-data state-transition
        run: npm run test:st:no-data
      - name: check calldata state-transition
        run: npm run test:st:calldata
      - name: check smt
        run: npm run test:smt
      - name: check contracts
        run: npm run test:contracts
      - name: check mt bridge
        run: npm run test:mt:bridge
      - name: check test e2e
        run: npm run test:e2e
      # Update check run
      - uses: actions/github-script@v5
        id: update-check-run
        if: ${{ always() }}
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
          conclusion: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;
            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref
            });
            const check = checks.check_runs.filter(c => c.name === process.env.job);
            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            return result;